package standard;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import gameObjects.Background;
import gameObjects.Bird;
import gameObjects.BirdExt;
import gameObjects.Floor;
import gameObjects.GameObject;
import gameObjects.GameOver;
import gameObjects.Highscore;
import gameObjects.Pipes;
import gameObjects.Restart;
import gameObjects.Score;
import gameObjects.Title;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class FlappyBird extends Application {
	 
    private Scene scene;
    private GraphicsContext ctx;
    private boolean birdDead = false;
    private boolean birdReady = false;
    private boolean mainMenu = true;
	private int remoteIndex;
	
	private int animationIndex = 0;
        
    public int getRemoteIndex() {
		return remoteIndex;
	}


	private double width = 450;
    private double height = 600;
    private double minWidth = 365;
    private double minHeight = 412;

    private Map<String, GameObject> gameObjects = new LinkedHashMap<String, GameObject>();
    private Map<Integer, BirdExt> allBirdsExt = new LinkedHashMap<>();
    
    private Bird bird;
    private Restart restart;
    public static Sprite activePipes[];

    private AnimationTimer timer;
	private ServerInteraction serverInteraction;
    private  boolean gameStarted = false;

    public static int score = 0;
    public static int highscore = 0;
    
    public static void main(String[] args) {
    	Application.launch(FlappyBird.class, args);
    }
    
    public void start(Stage stage) throws RemoteException {
        stage.setTitle("Flappy bird");
        stage.getIcons().add(new Image("/images/icon.png"));
        stage.setMinWidth(minWidth);
        stage.setMinHeight(minHeight);
        
        this.serverInteraction = new ServerInteraction(this);
        
        this.remoteIndex=serverInteraction.login();
       
        
        setScene(stage);
        initRender();
        startGameLoop();

        stage.show();
        
        if(remoteIndex != 0) {
        	for(int i = 0; i<remoteIndex; i++) {
        		registerNewBird(i);
        	}
        }
    }

    private void setScene(Stage stage) {
        Pane pane = new Pane();
        Canvas canvas = new Canvas();
        ctx = canvas.getGraphicsContext2D();

        canvas.heightProperty().bind(pane.heightProperty());
        canvas.widthProperty().bind(pane.widthProperty());

        canvas.widthProperty().addListener((obs, oldVal, newVal) -> {
            width = newVal.doubleValue();
            resizeHandler();
        });
        canvas.heightProperty().addListener((obs, oldVal, newVal) -> {
            height = newVal.doubleValue();
            resizeHandler();
        });

        pane.getChildren().addAll(canvas);
        scene = new Scene(pane, width, height);

        setInputHandlers(scene);
        stage.setScene(scene);
    }

    private void setInputHandlers(Scene scene) {
        scene.setOnKeyPressed(e -> {
            if (e.getCode() == KeyCode.SPACE)
                inputHandler(-1, -1);
        });
        
        scene.setOnKeyPressed(e -> {
            if (e.getCode() == KeyCode.RIGHT)
                animationIndex++;
            	initRender();
        });
        
        scene.setOnMousePressed(e -> {
            inputHandler(e.getX(), e.getY());
        });
    }

    private void inputHandler(double posX, double posY) {
        if (gameStarted && !isBirdDead()) { //?
            bird.jumpHandler();
        } else if (posX == -1 && posY == -1 || restart.checkClick(posX, posY) && !isBirdReady()) {
           // gameStarted = false;
           // gameEnded = false;
            initRender();
        	setBirdReady(true);

            FlappyBird.score = 0;

        }
    }

    void setBirdReady(boolean b) {
    	if(b)
		serverInteraction.birdReady();
		this.birdReady=b;
		
	}

	private void resizeHandler() {
        initRender();
    }

    public void initRender() {
        ctx.clearRect(0, 0, width, height);
        gameObjects.clear();

        gameObjects.put("background",   new Background(this,width, height, ctx));
        
        gameObjects.put("pipes",        new Pipes(this,width, height, ctx));
        
        gameObjects.put("floor",        new Floor(this,width, height, ctx));

        restart = new Restart(this,width, height, ctx);
        
        bird = new Bird(this,width, height, ctx);
        
        allBirdsExt.forEach((k,v) -> gameObjects.put("extern"+k, v)); //Warum die Nullpinter wegen ctx
        
        
        gameObjects.put("bird",         bird);
        gameObjects.put("restart",      restart);
        gameObjects.put("score",        new Score(this,width, height, ctx));
        gameObjects.put("title",        new Title(this,width, height, ctx));
        gameObjects.put("gameover",     new GameOver(this,width, height, ctx));
        gameObjects.put("highscore", new Highscore(this,width,height,ctx));
    }
    
    public void renderBirdAfterGameEnded() {
    	gameObjects.remove("bird");
    	bird  = new Bird(this,width, height, ctx);
    	gameObjects.put("bird",  bird);
    }

    private void updateGame(long now) {
        for (GameObject gameObject : gameObjects.values())
            gameObject.update(now);
    }

    private void renderGame() {
        ctx.clearRect(0, 0, width, height);

        for (GameObject gameObject : gameObjects.values()) {
        	gameObject.render();

        }
    }

    private void startGameLoop() {
        timer = new AnimationTimer() {
            public void handle(long now) {
            	try {
					Thread.sleep(30);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                updateGame(now);
                renderGame();
            }
        };
        timer.start();
    }

	public void registerNewBird(int remoteIndex) {
		allBirdsExt.put(remoteIndex, new BirdExt(this,width, height, ctx, remoteIndex));
		initRender(); 
		
	}

	public double[] getPosExt(int remoteIndex2) {
		try {
		return serverInteraction.getPosExt(remoteIndex2);
		}catch(NullPointerException e) {
			System.out.println("Noch keine Position");
			return null;
		}
	}

	public double[] getPos() {
		
		return this.bird.getSprite().getPos();
	}

	public boolean isGameStarted() {
		return gameStarted;
	}

	public void setGameStarted(boolean gameStarted) {
		this.gameStarted = gameStarted;
	}


	public boolean isBirdDead() {
		return birdDead;
	}

	public void setBirdDead(boolean birdDead) {
		if(birdDead) {

			serverInteraction.birdDied();

		}
		this.birdDead = birdDead;
	}

	public boolean isBirdReady() {
		// TODO Auto-generated method stub
		return birdReady;
	}
	
    public boolean isMainMenu() {
		return mainMenu;
	}

	public void setMainMenu(boolean mainMenu) {
		this.mainMenu = mainMenu;
	}

	//Soll nur synchronisiert werden wenn Spiel gestartet ist
	//Vorher schon zu synchronisieren war zu kompliziert da bereits beim Start-InitRender() Werte berechnet werden
	//wenn aber beispielweise schon ein Client existiert
	public int getServerRandomForPipes() {
		if(gameStarted) {
		return serverInteraction.getServerRandomForPipes();
		}else {
			return 0;
		}
	}

	public int getScore() {
		return score;
	}

	public void setHighscore(int highscoreAll) {
		highscore=highscoreAll;
		
	}

	public int getAnimationIndex() {
		return animationIndex;
	}
	
	

}

//Highscore-Button hinzufügen
//Nameneingabe hinzufügen auch zur Übergabe für Highscore
//Schauen wie man doppelte Highscores abspeichert
//Skins, Animationen, Namen mit übergeben (Animationen können ja von selbst gemacht werden)

//evtl noch Servername hinzufügen bei Server und Client